# Set min. snakemake version for compatability.
snakemake.utils.min_version("7.31.0")


# Skeleton config, parameters will be overwritten by user-defined config file.
configfile: "examples/example_config.yaml"


# Import modules. ----

import sys
import pandas as pd

# Custom modules.
sys.path.insert(0, "scripts/demultiplexing")
import sanity_checks

## Import samples and barcodes. ----
samples = pd.read_csv(config["path_samples"], sep="\t", dtype=str, comment="#")
barcodes = pd.read_csv(config["path_barcodes"], sep="\t", comment="#")

## Sanity checks of inputs. ----
sanity_checks.check_sanity(samples, barcodes, config)

## Select unique samples for which to generate sample-specific files. ----
samples_unique = samples.drop_duplicates(
    subset=["path_bcl", "sequencing_name", "sample_name", "species"]
)

# Select samples for haplotyping (optional).
samples_unique_haplotyping = samples_unique[
    samples_unique[["strain1", "strain2"]].notna().all(axis=1) &
    (samples_unique["species"] == "mouse")
]


# Constrain wildcard values to resolve downstream mixtures. ----
wildcard_constraints:
    sequencing_name="|".join(
        [re.escape(str(x)) for x in samples_unique["sequencing_name"]]
    ),
    sample_name="|".join([re.escape(str(x)) for x in samples_unique["sample_name"]]),
    species="|".join([re.escape(str(x)) for x in samples_unique["species"]]),


# Workflow output. ----


# Scatter-gather settings.
scattergather:
    fastq_split=config["settings"]["scatter_fastq_split"],


# Set working directory to output directory.
workdir: config["dir_output"]

rule all:
    input:
        # Run sci-rocket demultiplexing pipeline.
        expand("{sequencing_name}/sci-dash/", sequencing_name=samples_unique["sequencing_name"]),
        
        # Optional haplotyping rule (Mus musculus).
        expand(
            "{sequencing_name}/haplotyping/{sample_name}_{strain1}_{strain2}_haplotagged_readcounts.txt",
            sequencing_name=samples_unique_haplotyping["sequencing_name"],
            sample_name=samples_unique_haplotyping["sample_name"],
            strain1=samples_unique_haplotyping["strain1"],
            strain2=samples_unique_haplotyping["strain2"],
        ),


# Load rules ----


include: "rules/step1_bcl2fastq.smk"
include: "rules/step2_demultiplexing_fastq.smk"
include: "rules/step3_alignment.smk"
include: "rules/step4_dashboard.smk"
include: "rules/step5_haplotyping.smk"